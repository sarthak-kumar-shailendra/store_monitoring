# Generated by Django 4.2.3 on 2023-09-21 18:52

from django.db import migrations
from api.models import Status,StoreBusinessHours,StoresLogs,Store
import csv

class Migration(migrations.Migration):
    
    def create_store(apps, schema_editor):
            Store.objects.all().delete()
            StoreBusinessHours.objects.all().delete()
            StoresLogs.objects.all().delete()
            with open('api/csv_files/timezones.csv','r') as csvfile:
                csv_reader = csv.DictReader(csvfile)
                for row in csv_reader:
                    print(row)
                    Store.objects.create(
                        store_id=row['store_id'],
                        timezone_str=row['timezone_str'],
                    )


    def create_store_business_hours(apps, schema_editor):
        with open('api/csv_files/Menu_hours.csv') as csvfile:
            csv_reader = csv.DictReader(csvfile)
            for row in csv_reader:
                print(row)
                store = Store.objects.filter(store_id=row['store_id']).first()
                if store:
                    store_business_hours = StoreBusinessHours.objects.create(
                        store=store,
                        day=row['day'],
                        start_time_local=row['start_time_local'],
                        end_time_local=row['end_time_local'],
                    )
                    #print(store_business_hours)

                else:
                    storeCreated = Store.objects.create(
                        store_id=row['store_id'],
                        timezone_str='America/Chicago',
                    )
                    print(storeCreated)
                    store = Store.objects.filter(store_id=row['store_id']).first()
                    store_business_hours = StoreBusinessHours.objects.create(
                    store=store,
                    day=row['day'],
                    start_time_local=row['start_time_local'],
                    end_time_local=row['end_time_local'],
                    )
                    #print(store_business_hours)



    def create_stores_logs(apps, schema_editor):
        with open('api/csv_files/store_status.csv') as csvfile:
            csv_reader = csv.DictReader(csvfile)
            for row in csv_reader:
                print(row)
                store = Store.objects.filter(store_id=row['store_id']).first()
                status = Status.ACTIVE if row['status'] == 'active' else Status.INACTIVE
                timestamp = row['timestamp_utc'][:len(row['timestamp_utc'])-4]
                if store:
                    status_log = StoresLogs.objects.create(
                        store=store,
                        status=status,
                        timestamp_utc=timestamp
                    )
           
                else:
                    storeCreated = Store.objects.create(
                        store_id=row['store_id'],
                        timezone_str='America/Chicago',
                    )
                    print("else")
                    print(storeCreated)
                    store = Store.objects.filter(store_id=row['store_id']).first()
                    for i in range(7):
                        store_business_hours = StoreBusinessHours.objects.create(
                            store=store,
                            day=i,
                            start_time_local='00:00:00',
                            end_time_local='23:59:59',
                        )
                        print(i)

                    status_log = StoresLogs.objects.create(
                        store=store,
                        status=status,
                        timestamp_utc=timestamp
                    )
                    #print(status_log)


    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_store,reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_store_business_hours,reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_stores_logs,reverse_code=migrations.RunPython.noop),
    ]
